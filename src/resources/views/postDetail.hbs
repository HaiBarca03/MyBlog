<div class="container mt-4">
  <div class="border p-4 rounded shadow-sm">
    <h1>{{title}}</h1>
    <p>{{post.content}}</p>
    <p class="text-muted">Author: {{post.author}}</p>
    <p class="text-muted">Date: {{post.date}}</p>

    <div class="mt-4">
      {{#if post.media.images.length}}
      <div class="row">
        {{#each post.media.images}}
        <div class="col-md-4 mb-3">
          <img src="{{this}}" class="img-fluid rounded" alt="Image">
        </div>
        {{/each}}
      </div>
      {{else}}
      <p>No images available.</p>
      {{/if}}
    </div>

    <div class="mt-4">
      {{#if post.media.videos.length}}
      <ul class="list-group">
        {{#each post.media.videos}}
        <li class="list-group-item">
          <a href="{{this}}" class="btn btn-primary" target="_blank">Watch Video</a>
        </li>
        {{/each}}
      </ul>
      {{else}}
      <p>No videos available.</p>
      {{/if}}
    </div>

    <div class="mt-4">
      <div class="d-flex align-items-center p-3 rounded bg-light">
        <i class="bi bi-heart me-3 like-post-icon {{#if post.liked}}bi-heart-fill text-danger{{else}}bi-heart{{/if}}"
          id="like-post-icon" style="cursor: pointer;">
          <span id="like-count">{{post.likeCount}}</span>
        </i>
        <i class="bi bi-chat-square-dots me-3" id="show-comments-icon" style="cursor: pointer;">
          <span id="comment-count">{{post.comments.length}}</span>
        </i>
        <i class="bi bi-pencil-square" id="write-comment-icon" style="cursor: pointer;"></i>
      </div>
    </div>

    <div id="comments-section" class="mt-3 d-none">
      <h2>Bình luận</h2>
      {{#if post.comments.length}}
      <ul class="list-group">
        {{#each post.comments}}
        <li class="list-group-item rounded mb-2" data-id="{{this._id}}" data-author="{{this.author}}">
          <p class="fw-bold">{{this.author}}</p>
          <p class="comment-content">{{this.content}}</p>
          <p class="text-muted" data-time="{{this.date}}"></p>
          <div class="comment-actions d-none">
            <button class="btn btn-warning btn-sm edit-btn" data-id="{{this._id}}">Edit</button>
            <button class="btn btn-danger btn-sm delete-btn" data-id="{{this._id}}">Delete</button>
          </div>
        </li>
        {{/each}}
      </ul>
      {{else}}
      <p>No comments yet.</p>
      {{/if}}
    </div>

    <div id="add-comment-section" class="mt-3 d-none">
      <form action="/comments" method="POST">
        <input type="hidden" name="postId" value="{{post._id}}">
        <div class="mb-3">
          <label for="commentContent" class="form-label">Mời bạn để lại bình luận !!!</label>
          <textarea class="form-control" id="commentContent" name="content" rows="3" required></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
      </form>
    </div>
  </div>
</div>

<style>
  .bi-heart-fill {
    color: red;
  }

  #comment-count,
  #like-count {
    font-size: 11px;
  }
  .container {
    margin-top: 50px;
    margin-bottom: 50px;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const showCommentsIcon = document.getElementById('show-comments-icon');
    const writeCommentIcon = document.getElementById('write-comment-icon');
    const likePostIcon = document.getElementById('like-post-icon');
    const commentsSection = document.getElementById('comments-section');
    const addCommentSection = document.getElementById('add-comment-section');
    const likeCount = document.getElementById('like-count');
    const commentCount = document.getElementById('comment-count');

    showCommentsIcon.addEventListener('click', () => {
      commentsSection.classList.toggle('d-none');
    });

    writeCommentIcon.addEventListener('click', () => {
      addCommentSection.classList.toggle('d-none');
    });

    likePostIcon.addEventListener('click', async () => {
      try {
        const response = await fetch(`/posts/{{post._id}}/like`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          credentials: 'include'
        });

        if (response.ok) {
          const result = await response.json();
          likeCount.textContent = result.likeCount;

          // Cập nhật trạng thái của nút like
          if (result.liked) {
            likePostIcon.classList.remove('bi-heart');
            likePostIcon.classList.add('bi-heart-fill', 'text-danger');
          } else {
            likePostIcon.classList.remove('bi-heart-fill', 'text-danger');
            likePostIcon.classList.add('bi-heart');
          }
        } else {
          console.error('Failed to like/unlike the post.');
        }
      } catch (error) {
        console.error('Error liking/unliking the post:', error);
      }
    });

    document.querySelectorAll('.list-group-item').forEach(item => {
      item.addEventListener('dblclick', function () {
        const actions = this.querySelector('.comment-actions');
        actions.classList.toggle('d-none');
      });
    });

    document.addEventListener('click', async (event) => {
      if (event.target.classList.contains('edit-btn')) {
        const commentItem = event.target.closest('.list-group-item');
        const commentId = event.target.getAttribute('data-id');
        const commentContentElement = commentItem.querySelector('.comment-content');
        const currentContent = commentContentElement.innerText;

        const editForm = document.createElement('form');
        editForm.innerHTML = `
          <div class="input-group mb-3">
            <input type="text" class="form-control" value="${currentContent}">
            <button class="btn btn-primary" type="submit">Save</button>
            <button class="btn btn-secondary cancel-edit" type="button">Cancel</button>
          </div>
        `;

        commentContentElement.style.display = 'none';
        commentItem.insertBefore(editForm, commentContentElement);

        editForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const newContent = editForm.querySelector('input').value;

          const response = await fetch(`/comment/${commentId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ content: newContent }),
          });

          if (response.ok) {
            commentContentElement.innerText = newContent;
            commentContentElement.style.display = '';
            editForm.remove();
          } else {
            console.error('Failed to update the comment.');
          }
        });

        editForm.querySelector('.cancel-edit').addEventListener('click', () => {
          commentContentElement.style.display = '';
          editForm.remove();
        });
      }
    });

    document.addEventListener('click', async (event) => {
      if (event.target.classList.contains('delete-btn')) {
        const commentId = event.target.getAttribute('data-id');

        const confirmed = confirm('Do you really want to delete this comment?');
        if (confirmed) {
          const response = await fetch(`/comments/${commentId}`, {
            method: 'DELETE',
          });

          if (response.ok) {
            alert('Comment deleted successfully');
            location.reload();
          } else {
            alert('Failed to delete the comment.');
          }
        }
      }
    });
  });
</script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.5.0/font/bootstrap-icons.min.css">